
//–––––––––––––––––––––––––––––––––––
//  Toggle Switch Button
//–––––––––––––––––––––––––––––––––––

@mixin toggle-button-branding {
  
  input[type="checkbox"] {
    
    &[disabled] ~ label {
      color: rgba($toggle-button-off-color, 0.5);
    }

    &:checked {
      ~ label {
        &:hover { 
           color: $default-color; ;
        }
        
        .toggle-button__switch {
          &:after { 
            color: $default-color; 
          }

        }
      }
    }

  }
  
  label {
    
    .toggle-button__label-text { flex: 1; }
    
    .toggle-button__switch {
      transition: background-color 0.3s $toggle-button-transition;
      background: lighten($toggle-button-off-color, 5%);
      &:before { 
        color: lighten($black-color, 80.00); 
      }
      &:after {
        // Autoprefixer choked here, so making the prefixes explicit
        -webkit-transition: -webkit-transform 0.3s $toggle-button-transition;
        transition: transform 0.3s $toggle-button-transition;
        color: $default-color; 
        background: $base-brand-color;
      }
    }
    
  }
}

@mixin toggle-button-appearance {
  $toggle-button-switch-width: $toggle-button-width/2;
  
  input[type="checkbox"] {


    &:checked {
      ~ label {
        .toggle-button__switch {
          &:after { transform: translate3d($toggle-button-width - ($toggle-button-switch-width + $toggle-button-offset),0,0); }  
        }
      }
    
    }
  }
  
  label {
    font-size: $base-font-size;
    
    .toggle-button__switch {
      height: $toggle-button-height;
      flex: 0 0 $toggle-button-width;
      border-radius: $toggle-button-border-radius;
      
      &:before {
        left: $toggle-button-width/2;
        font-size: $base-font-size; 
        line-height: $toggle-button-height;
        width: $toggle-button-width/2;
        padding: 0 12px;
      }
      
      &:after {
        top: $toggle-button-offset; 
        left: $toggle-button-offset;
        border-radius: $toggle-button-border-radius/2;
        width: $toggle-button-switch-width - $toggle-button-offset; 
        line-height: $toggle-button-height - ($toggle-button-offset*2);
        font-size: $base-font-size;
      }
      
      
    } 
  }
}

//–––––––––––––––––––––––––––––––––––
//  MEDIA QUERIES
//–––––––––––––––––––––––––––––––––––

// A map of breakpoints.
$breakpoints: (
  xs: 576px,
  sm: 768px,
  md: 992px,
  lg: 1200px,
  xl: 1500px
);


//
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }
  
  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


//
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  
  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


//
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {

  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  
  // If one or both of the breakpoints don't exist.
  } @else {

    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {

      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {

      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}
